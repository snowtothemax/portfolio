{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\n\nvar Card = /*#__PURE__*/function (_React$Component) {\n  _inherits(Card, _React$Component);\n\n  var _super = _createSuper(Card);\n\n  function Card(props) {\n    var _this;\n\n    _classCallCheck(this, Card);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      clickable: _this.props.clickable,\n      //If the card is clickable or not\n      hover: false //whether the card should hover or not\n\n    };\n    return _this;\n  }\n\n  _createClass(Card, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      //checks to see if hover is true and which style to choose\n      var linkStyle;\n\n      if (this.state.hover) {\n        linkStyle = {\n          width: this.props.width,\n          maxHeight: this.props.height,\n          background: '#FFFFFF',\n          cursor: 'pointer',\n          flexDirection: 'column',\n          display: 'flex',\n          alignItems: 'center',\n          opacity: 1\n        };\n      } else {\n        linkStyle = {\n          width: this.props.width,\n          maxHeight: this.props.height,\n          background: '#FFFFFF',\n          flexDirection: 'column',\n          display: 'flex',\n          alignItems: 'center',\n          opacity: .4\n        };\n      }\n\n      if (this.state.clickable) {\n        //the Card that is created if clickable is true\n        return __jsx(\"div\", {\n          style: linkStyle,\n          onMouseEnter: function onMouseEnter() {\n            return _this2.setState({\n              hover: !_this2.state.hover\n            });\n          },\n          onMouseLeave: function onMouseLeave() {\n            return _this2.setState({\n              hover: !_this2.state.hover\n            });\n          },\n          onClick: this.props.onClick\n        }, this.props.children); //the card that is created if false\n      } else {\n        return __jsx(\"div\", {\n          style: {\n            width: this.props.width,\n            maxHeight: this.props.height,\n            background: '#FFFFFF',\n            flexDirection: 'row',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            textAlign: 'center',\n            position: 'relative'\n          }\n        }, this.props.children);\n      }\n    }\n  }]);\n\n  return Card;\n}(React.Component);\n\nexport { Card as default };","map":null,"metadata":{},"sourceType":"module"}